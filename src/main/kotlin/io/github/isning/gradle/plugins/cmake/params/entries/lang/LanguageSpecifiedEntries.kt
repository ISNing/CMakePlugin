/*
 * Copyright 2024 ISNing
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.github.isning.gradle.plugins.cmake.params.entries.lang

import io.github.isning.gradle.plugins.cmake.params.CMakeParams
import io.github.isning.gradle.plugins.cmake.params.entries.CMakeCacheEntries
import io.github.isning.gradle.plugins.cmake.params.entries.CMakeCacheEntriesWithValueAutoGenerated
import io.github.isning.gradle.plugins.cmake.params.entries.HyperCMakeCacheEntries
import io.github.isning.gradle.plugins.cmake.params.entries.IHyperCMakeCacheEntries

interface LanguageSpecifiedEntries : CMakeCacheEntries {
    val language: String
    val archiveAppend: String?
    val archiveCreate: String?
    val archiveFinish: String?
    val byteOrder: String?
    val compileObject: String?
    val compiler: String?
    val compilerExternalToolchain: String?
    val compilerId: String?
    val compilerLoaded: Boolean?
    val compilerPredefinesCommand: String?
    val compilerTarget: String?
    val compilerVersion: String?
    val createSharedLibrary: String?
    val createSharedModule: String?
    val createStaticLibrary: String?
    val extensions: String?
    val extensionsDefault: String?
    val flags: String?
    val flagsInit: String?
    val flagsDebug: String?
    val flagsDebugInit: String?
    val flagsMinsizerel: String?
    val flagsMinsizerelInit: String?
    val flagsRelease: String?
    val flagsReleaseInit: String?
    val flagsRelwithdebinfo: String?
    val flagsRelwithdebinfoInit: String?
    val hostCompiler: String?
    val ignoreExtensions: String?
    val implicitIncludeDirectories: String?
    val implicitLinkDirectories: String?
    val implicitLinkFrameworkDirectories: String?
    val implicitLinkLibraries: String?
    val libraryArchitecture: String?
    val linkExecutable: String?
    val linkerWrapperFlag: String?
    val linkerWrapperFlagSep: String?
    val outputExtension: String?
    val simulateId: String?
    val simulateVersion: String?
    val sizeofDataPtr: String?
    val sourceFileExtensions: String?
    val standard: String?
    val standardDefault: String?
    val standardIncludeDirectories: String?
    val standardLibraries: String?
    val standardRequired: Boolean?
    val clangTidy: String?
    val clangTidyExportFixesDir: String?
    val compilerLauncher: String?
    val cppcheck: String?
    val cpplint: String?
    val includeWhatYouUse: String?
    val linkLibraryFileFlag: String?
    val linkLibraryFlag: String?
    val linkWhatYouUseFlag: String?
    val linkerLauncher: String?
    val visibilityPreset: String?
    val compilerAr: String?
    val compilerFrontendVariant: String?
    val compilerRanlib: String?
    val linkLibrarySuffix: String?
    val androidToolchainMachine: String?
    val androidToolchainPrefix: String?
    val androidToolchainSuffix: String?
}

interface ModifiableLanguageSpecifiedEntries : LanguageSpecifiedEntries {
    override var language: String
    override var archiveAppend: String?
    override var archiveCreate: String?
    override var archiveFinish: String?
    override var byteOrder: String?
    override var compileObject: String?
    override var compiler: String?
    override var compilerExternalToolchain: String?
    override var compilerId: String?
    override var compilerLoaded: Boolean?
    override var compilerPredefinesCommand: String?
    override var compilerTarget: String?
    override var compilerVersion: String?
    override var createSharedLibrary: String?
    override var createSharedModule: String?
    override var createStaticLibrary: String?
    override var extensions: String?
    override var extensionsDefault: String?
    override var flags: String?
    override var flagsInit: String?
    override var flagsDebug: String?
    override var flagsDebugInit: String?
    override var flagsMinsizerel: String?
    override var flagsMinsizerelInit: String?
    override var flagsRelease: String?
    override var flagsReleaseInit: String?
    override var flagsRelwithdebinfo: String?
    override var flagsRelwithdebinfoInit: String?
    override var hostCompiler: String?
    override var ignoreExtensions: String?
    override var implicitIncludeDirectories: String?
    override var implicitLinkDirectories: String?
    override var implicitLinkFrameworkDirectories: String?
    override var implicitLinkLibraries: String?
    override var libraryArchitecture: String?
    override var linkExecutable: String?
    override var linkerWrapperFlag: String?
    override var linkerWrapperFlagSep: String?
    override var outputExtension: String?
    override var simulateId: String?
    override var simulateVersion: String?
    override var sizeofDataPtr: String?
    override var sourceFileExtensions: String?
    override var standard: String?
    override var standardDefault: String?
    override var standardIncludeDirectories: String?
    override var standardLibraries: String?
    override var standardRequired: Boolean?
    override var clangTidy: String?
    override var clangTidyExportFixesDir: String?
    override var compilerLauncher: String?
    override var cppcheck: String?
    override var cpplint: String?
    override var includeWhatYouUse: String?
    override var linkLibraryFileFlag: String?
    override var linkLibraryFlag: String?
    override var linkWhatYouUseFlag: String?
    override var linkerLauncher: String?
    override var visibilityPreset: String?
    override var compilerAr: String?
    override var compilerFrontendVariant: String?
    override var compilerRanlib: String?
    override var linkLibrarySuffix: String?
    override var androidToolchainMachine: String?
    override var androidToolchainPrefix: String?
    override var androidToolchainSuffix: String?
}

interface LanguageSpecifiedEntriesAutoGen : LanguageSpecifiedEntries, CMakeCacheEntriesWithValueAutoGenerated {
    override val propertyNameToKey: Map<String, String>
        get() = mapOf(
            "archiveAppend" to "CMAKE_${language}_ARCHIVE_APPEND",
            "archiveCreate" to "CMAKE_${language}_ARCHIVE_CREATE",
            "archiveFinish" to "CMAKE_${language}_ARCHIVE_FINISH",
            "byteOrder" to "CMAKE_${language}_BYTE_ORDER",
            "compileObject" to "CMAKE_${language}_COMPILE_OBJECT",
            "compilerExternalToolchain" to "CMAKE_${language}_COMPILER_EXTERNAL_TOOLCHAIN",
            "compiler" to "CMAKE_${language}_COMPILER",
            "compilerId" to "CMAKE_${language}_COMPILER_ID",
            "compilerLoaded" to "CMAKE_${language}_COMPILER_LOADED",
            "compilerPredefinesCommand" to "CMAKE_${language}_COMPILER_PREDEFINES_COMMAND",
            "compilerTarget" to "CMAKE_${language}_COMPILER_TARGET",
            "compilerVersion" to "CMAKE_${language}_COMPILER_VERSION",
            "createSharedLibrary" to "CMAKE_${language}_CREATE_SHARED_LIBRARY",
            "createSharedModule" to "CMAKE_${language}_CREATE_SHARED_MODULE",
            "createStaticLibrary" to "CMAKE_${language}_CREATE_STATIC_LIBRARY",
            "extensions" to "CMAKE_${language}_EXTENSIONS",
            "extensionsDefault" to "CMAKE_${language}_EXTENSIONS_DEFAULT",
            "flags" to "CMAKE_${language}_FLAGS",
            "flagsInit" to "CMAKE_${language}_FLAGS_INIT",
            "flagsDebug" to "CMAKE_${language}_FLAGS_DEBUG",
            "flagsDebugInit" to "CMAKE_${language}_FLAGS_DEBUG_INIT",
            "flagsMinsizerel" to "CMAKE_${language}_FLAGS_MINSIZEREL",
            "flagsMinsizerelInit" to "CMAKE_${language}_FLAGS_MINSIZEREL_INIT",
            "flagsRelease" to "CMAKE_${language}_FLAGS_RELEASE",
            "flagsReleaseInit" to "CMAKE_${language}_FLAGS_RELEASE_INIT",
            "flagsRelwithdebinfo" to "CMAKE_${language}_FLAGS_RELWITHDEBINFO",
            "flagsRelwithdebinfoInit" to "CMAKE_${language}_FLAGS_RELWITHDEBINFO_INIT",
            "hostCompiler" to "CMAKE_${language}_HOST_COMPILER",
            "ignoreExtensions" to "CMAKE_${language}_IGNORE_EXTENSIONS",
            "implicitIncludeDirectories" to "CMKAKE_${language}_IMPLICIT_INCLUDE_DIRECTORIES",
            "implicitLinkDirectories" to "CMAKE_${language}_IMPLICIT_LINK_DIRECTORIES",
            "implicitLinkFrameworkDirectories" to "CMAKE_${language}_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES",
            "implicitLinkLibraries" to "CMAKE_${language}_IMPLICIT_LINK_LIBRARIES",
            "libraryArchitecture" to "CMAKE_${language}_LIBRARY_ARCHITECTURE",
            "linkExecutable" to "CMAKE_${language}_LINK_EXECUTABLE",
            "linkerWrapperFlag" to "CMAKE_${language}_LINKER_WRAPPER_FLAG",
            "linkerWrapperFlagSep" to "CMAKE_${language}_LINKER_WRAPPER_FLAG_SEP",
            "outputExtension" to "CMAKE_${language}_OUTPUT_EXTENSION",
            "simulateId" to "CMAKE_${language}_SIMULATE_ID",
            "simulateVersion" to "CMAKE_${language}_SIMULATE_VERSION",
            "sizeofDataPtr" to "CMAKE_${language}_SIZEOF_DATA_PTR",
            "sourceFileExtensions" to "CMAKE_${language}_SOURCE_FILE_EXTENSIONS",
            "standard" to "CMAKE_${language}_STANDARD",
            "standardDefault" to "CMAKE_${language}_STANDARD_DEFAULT",
            "standardIncludeDirectories" to "CMAKE_${language}_STANDARD_INCLUDE_DIRECTORIES",
            "standardLibraries" to "CMAKE_${language}_STANDARD_LIBRARIES",
            "standardRequired" to "CMAKE_${language}_STANDARD_REQUIRED",

            "clangTidy" to "CMAKE_${language}_CLANG_TIDY",
            "clangTidyExportFixesDir" to "CMAKE_${language}_CLANG_TIDY_EXPORT_FIXES_DIR",
            "compilerLauncher" to "CMAKE_${language}_COMPILER_LAUNCHER",
            "cppcheck" to "CMAKE_${language}_CPPCHECK",
            "cpplint" to "CMAKE_${language}_CPPLINT",
            "includeWhatYouUse" to "CMAKE_${language}_INCLUDE_WHAT_YOU_USE",
            "linkLibraryFileFlag" to "CMAKE_${language}_LINK_LIBRARY_FILE_FLAG",
            "linkLibraryFlag" to "CMAKE_${language}_LINK_LIBRARY_FLAG",
            "linkWhatYouUseFlag" to "CMAKE_${language}_LINK_WHAT_YOU_USE_FLAG",
            "linkerLauncher" to "CMAKE_${language}_LINKER_LAUNCHER",
            "visibilityPreset" to "CMAKE_${language}_VISIBILITY_PRESET",
            "compilerAr" to "CMAKE_${language}_COMPILER_AR",
            "compilerFrontendVariant" to "CMAKE_${language}_COMPILER_FRONTEND_VARIANT",
            "compilerRanlib" to "CMAKE_${language}_COMPILER_RANLIB",
            "linkLibrarySuffix" to "CMAKE_${language}_LINK_LIBRARY_SUFFIX",

            "androidToolchainMachine" to "CMAKE_${language}_ANDROID_TOOLCHAIN_MACHINE",
            "androidToolchainPrefix" to "CMAKE_${language}_ANDROID_TOOLCHAIN_PREFIX",
            "androidToolchainSuffix" to "CMAKE_${language}_ANDROID_TOOLCHAIN_SUFFIX",
        )
}

/**
 * This class represents the language-specific entries for the CMake build system.
 * It implements the CMakeCacheEntries class and adds language-specific properties.
 */
open class LanguageSpecifiedEntriesImpl(
    language: String,
) : LanguageSpecifiedEntriesAutoGen {
    override val language: String = language.uppercase()
    override val archiveAppend: String? = null
    override val archiveCreate: String? = null
    override val archiveFinish: String? = null
    override val byteOrder: String? = null
    override val compileObject: String? = null
    override val compiler: String? = null
    override val compilerExternalToolchain: String? = null
    override val compilerId: String? = null
    override val compilerLoaded: Boolean? = null
    override val compilerPredefinesCommand: String? = null
    override val compilerTarget: String? = null
    override val compilerVersion: String? = null
    override val createSharedLibrary: String? = null
    override val createSharedModule: String? = null
    override val createStaticLibrary: String? = null
    override val extensions: String? = null
    override val extensionsDefault: String? = null
    override val flags: String? = null
    override val flagsInit: String? = null
    override val flagsDebug: String? = null
    override val flagsDebugInit: String? = null
    override val flagsMinsizerel: String? = null
    override val flagsMinsizerelInit: String? = null
    override val flagsRelease: String? = null
    override val flagsReleaseInit: String? = null
    override val flagsRelwithdebinfo: String? = null
    override val flagsRelwithdebinfoInit: String? = null
    override val hostCompiler: String? = null
    override val ignoreExtensions: String? = null
    override val implicitIncludeDirectories: String? = null
    override val implicitLinkDirectories: String? = null
    override val implicitLinkFrameworkDirectories: String? = null
    override val implicitLinkLibraries: String? = null
    override val libraryArchitecture: String? = null
    override val linkExecutable: String? = null
    override val linkerWrapperFlag: String? = null
    override val linkerWrapperFlagSep: String? = null
    override val outputExtension: String? = null
    override val simulateId: String? = null
    override val simulateVersion: String? = null
    override val sizeofDataPtr: String? = null
    override val sourceFileExtensions: String? = null
    override val standard: String? = null
    override val standardDefault: String? = null
    override val standardIncludeDirectories: String? = null
    override val standardLibraries: String? = null
    override val standardRequired: Boolean? = null

    override val clangTidy: String? = null
    override val clangTidyExportFixesDir: String? = null
    override val compilerLauncher: String? = null
    override val cppcheck: String? = null
    override val cpplint: String? = null
    override val includeWhatYouUse: String? = null
    override val linkLibraryFileFlag: String? = null
    override val linkLibraryFlag: String? = null
    override val linkWhatYouUseFlag: String? = null
    override val linkerLauncher: String? = null
    override val visibilityPreset: String? = null
    override val compilerAr: String? = null
    override val compilerFrontendVariant: String? = null
    override val compilerRanlib: String? = null
    override val linkLibrarySuffix: String? = null

    override val androidToolchainMachine: String? = null
    override val androidToolchainPrefix: String? = null
    override val androidToolchainSuffix: String? = null
}

open class ModifiableLanguageSpecifiedEntriesImpl(language: String) : ModifiableLanguageSpecifiedEntries,
    LanguageSpecifiedEntriesAutoGen, IHyperCMakeCacheEntries {
    private val hyper = object : HyperCMakeCacheEntries() {
        override val propertyNameToKey: Map<String, String>
            get() = this@ModifiableLanguageSpecifiedEntriesImpl.propertyNameToKey
    }

    final override val recorder
        get() = hyper.recorder
    final override val explicitlyRemovedElements: Set<String>
        get() = hyper.explicitlyRemovedElements

    override var language: String = language.uppercase()
    override var archiveAppend: String? by recorder.observed(null)
    override var archiveCreate: String? by recorder.observed(null)
    override var archiveFinish: String? by recorder.observed(null)
    override var byteOrder: String? by recorder.observed(null)
    override var compileObject: String? by recorder.observed(null)
    override var compiler: String? by recorder.observed(null)
    override var compilerExternalToolchain: String? by recorder.observed(null)
    override var compilerId: String? by recorder.observed(null)
    override var compilerLoaded: Boolean? by recorder.observed(null)
    override var compilerPredefinesCommand: String? by recorder.observed(null)
    override var compilerTarget: String? by recorder.observed(null)
    override var compilerVersion: String? by recorder.observed(null)
    override var createSharedLibrary: String? by recorder.observed(null)
    override var createSharedModule: String? by recorder.observed(null)
    override var createStaticLibrary: String? by recorder.observed(null)
    override var extensions: String? by recorder.observed(null)
    override var extensionsDefault: String? by recorder.observed(null)
    override var flags: String? by recorder.observed(null)
    override var flagsInit: String? by recorder.observed(null)
    override var flagsDebug: String? by recorder.observed(null)
    override var flagsDebugInit: String? by recorder.observed(null)
    override var flagsMinsizerel: String? by recorder.observed(null)
    override var flagsMinsizerelInit: String? by recorder.observed(null)
    override var flagsRelease: String? by recorder.observed(null)
    override var flagsReleaseInit: String? by recorder.observed(null)
    override var flagsRelwithdebinfo: String? by recorder.observed(null)
    override var flagsRelwithdebinfoInit: String? by recorder.observed(null)
    override var hostCompiler: String? by recorder.observed(null)
    override var ignoreExtensions: String? by recorder.observed(null)
    override var implicitIncludeDirectories: String? by recorder.observed(null)
    override var implicitLinkDirectories: String? by recorder.observed(null)
    override var implicitLinkFrameworkDirectories: String? by recorder.observed(null)
    override var implicitLinkLibraries: String? by recorder.observed(null)
    override var libraryArchitecture: String? by recorder.observed(null)
    override var linkExecutable: String? by recorder.observed(null)
    override var linkerWrapperFlag: String? by recorder.observed(null)
    override var linkerWrapperFlagSep: String? by recorder.observed(null)
    override var outputExtension: String? by recorder.observed(null)
    override var simulateId: String? by recorder.observed(null)
    override var simulateVersion: String? by recorder.observed(null)
    override var sizeofDataPtr: String? by recorder.observed(null)
    override var sourceFileExtensions: String? by recorder.observed(null)
    override var standard: String? by recorder.observed(null)
    override var standardDefault: String? by recorder.observed(null)
    override var standardIncludeDirectories: String? by recorder.observed(null)
    override var standardLibraries: String? by recorder.observed(null)
    override var standardRequired: Boolean? by recorder.observed(null)

    override var clangTidy: String? by recorder.observed(null)
    override var clangTidyExportFixesDir: String? by recorder.observed(null)
    override var compilerLauncher: String? by recorder.observed(null)
    override var cppcheck: String? by recorder.observed(null)
    override var cpplint: String? by recorder.observed(null)
    override var includeWhatYouUse: String? by recorder.observed(null)
    override var linkLibraryFileFlag: String? by recorder.observed(null)
    override var linkLibraryFlag: String? by recorder.observed(null)
    override var linkWhatYouUseFlag: String? by recorder.observed(null)
    override var linkerLauncher: String? by recorder.observed(null)
    override var visibilityPreset: String? by recorder.observed(null)
    override var compilerAr: String? by recorder.observed(null)
    override var compilerFrontendVariant: String? by recorder.observed(null)
    override var compilerRanlib: String? by recorder.observed(null)
    override var linkLibrarySuffix: String? by recorder.observed(null)

    override var androidToolchainMachine: String? by recorder.observed(null)
    override var androidToolchainPrefix: String? by recorder.observed(null)
    override var androidToolchainSuffix: String? by recorder.observed(null)

    val CMakeParams.entries: LanguageSpecifiedEntries
        get() = object : LanguageSpecifiedEntriesImpl(language) {
            override val archiveAppend: String?
                get() = entriesByPropertyName["archiveAppend"]
            override val archiveCreate: String?
                get() = entriesByPropertyName["archiveCreate"]
            override val archiveFinish: String?
                get() = entriesByPropertyName["archiveFinish"]
            override val byteOrder: String?
                get() = entriesByPropertyName["byteOrder"]
            override val compileObject: String?
                get() = entriesByPropertyName["compileObject"]
            override val compiler: String?
                get() = entriesByPropertyName["compiler"]
            override val compilerExternalToolchain: String?
                get() = entriesByPropertyName["compilerExternalToolchain"]
            override val compilerId: String?
                get() = entriesByPropertyName["compilerId"]
            override val compilerLoaded: Boolean?
                get() = entriesByPropertyName["compilerLoaded"]?.toBoolean()
            override val compilerPredefinesCommand: String?
                get() = entriesByPropertyName["compilerPredefinesCommand"]
            override val compilerTarget: String?
                get() = entriesByPropertyName["compilerTarget"]
            override val compilerVersion: String?
                get() = entriesByPropertyName["compilerVersion"]
            override val createSharedLibrary: String?
                get() = entriesByPropertyName["createSharedLibrary"]
            override val createSharedModule: String?
                get() = entriesByPropertyName["createSharedModule"]
            override val createStaticLibrary: String?
                get() = entriesByPropertyName["createStaticLibrary"]
            override val extensions: String?
                get() = entriesByPropertyName["extensions"]
            override val extensionsDefault: String?
                get() = entriesByPropertyName["extensionsDefault"]
            override val flags: String?
                get() = entriesByPropertyName["flags"]
            override val flagsInit: String?
                get() = entriesByPropertyName["flagsInit"]
            override val flagsDebug: String?
                get() = entriesByPropertyName["flagsDebug"]
            override val flagsDebugInit: String?
                get() = entriesByPropertyName["flagsDebugInit"]
            override val flagsMinsizerel: String?
                get() = entriesByPropertyName["flagsMinsizerel"]
            override val flagsMinsizerelInit: String?
                get() = entriesByPropertyName["flagsMinsizerelInit"]
            override val flagsRelease: String?
                get() = entriesByPropertyName["flagsRelease"]
            override val flagsReleaseInit: String?
                get() = entriesByPropertyName["flagsReleaseInit"]
            override val flagsRelwithdebinfo: String?
                get() = entriesByPropertyName["flagsRelwithdebinfo"]
            override val flagsRelwithdebinfoInit: String?
                get() = entriesByPropertyName["flagsRelwithdebinfoInit"]
            override val hostCompiler: String?
                get() = entriesByPropertyName["hostCompiler"]
            override val ignoreExtensions: String?
                get() = entriesByPropertyName["ignoreExtensions"]
            override val implicitIncludeDirectories: String?
                get() = entriesByPropertyName["implicitIncludeDirectories"]
            override val implicitLinkDirectories: String?
                get() = entriesByPropertyName["implicitLinkDirectories"]
            override val implicitLinkFrameworkDirectories: String?
                get() = entriesByPropertyName["implicitLinkFrameworkDirectories"]
            override val implicitLinkLibraries: String?
                get() = entriesByPropertyName["implicitLinkLibraries"]
            override val libraryArchitecture: String?
                get() = entriesByPropertyName["libraryArchitecture"]
            override val linkExecutable: String?
                get() = entriesByPropertyName["linkExecutable"]
            override val linkerWrapperFlag: String?
                get() = entriesByPropertyName["linkerWrapperFlag"]
            override val linkerWrapperFlagSep: String?
                get() = entriesByPropertyName["linkerWrapperFlagSep"]
            override val outputExtension: String?
                get() = entriesByPropertyName["outputExtension"]
            override val simulateId: String?
                get() = entriesByPropertyName["simulateId"]
            override val simulateVersion: String?
                get() = entriesByPropertyName["simulateVersion"]
            override val sizeofDataPtr: String?
                get() = entriesByPropertyName["sizeofDataPtr"]
            override val sourceFileExtensions: String?
                get() = entriesByPropertyName["sourceFileExtensions"]
            override val standard: String?
                get() = entriesByPropertyName["standard"]
            override val standardDefault: String?
                get() = entriesByPropertyName["standardDefault"]
            override val standardIncludeDirectories: String?
                get() = entriesByPropertyName["standardIncludeDirectories"]
            override val standardLibraries: String?
                get() = entriesByPropertyName["standardLibraries"]
            override val standardRequired: Boolean?
                get() = entriesByPropertyName["standardRequired"]?.toBoolean()

            override val clangTidy: String?
                get() = entriesByPropertyName["clangTidy"]
            override val clangTidyExportFixesDir: String?
                get() = entriesByPropertyName["clangTidyExportFixesDir"]
            override val compilerLauncher: String?
                get() = entriesByPropertyName["compilerLauncher"]
            override val cppcheck: String?
                get() = entriesByPropertyName["cppcheck"]
            override val cpplint: String?
                get() = entriesByPropertyName["cpplint"]
            override val includeWhatYouUse: String?
                get() = entriesByPropertyName["includeWhatYouUse"]
            override val linkLibraryFileFlag: String?
                get() = entriesByPropertyName["linkLibraryFileFlag"]
            override val linkLibraryFlag: String?
                get() = entriesByPropertyName["linkLibraryFlag"]
            override val linkWhatYouUseFlag: String?
                get() = entriesByPropertyName["linkWhatYouUseFlag"]
            override val linkerLauncher: String?
                get() = entriesByPropertyName["linkerLauncher"]
            override val visibilityPreset: String?
                get() = entriesByPropertyName["visibilityPreset"]
            override val compilerAr: String?
                get() = entriesByPropertyName["compilerAr"]
            override val compilerFrontendVariant: String?
                get() = entriesByPropertyName["compilerFrontendVariant"]
            override val compilerRanlib: String?
                get() = entriesByPropertyName["compilerRanlib"]
            override val linkLibrarySuffix: String?
                get() = entriesByPropertyName["linkLibrarySuffix"]

            override val androidToolchainMachine: String?
                get() = entriesByPropertyName["androidToolchainMachine"]
            override val androidToolchainPrefix: String?
                get() = entriesByPropertyName["androidToolchainPrefix"]
            override val androidToolchainSuffix: String?
                get() = entriesByPropertyName["androidToolchainSuffix"]
        }
}