/*
 * Copyright 2024 ISNing
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.github.isning.gradle.plugins.cmake.params.entries

import org.gradle.kotlin.dsl.provideDelegate

interface BasicCMakeEntriesProps {
    val buildType: String?
    val cCompiler: String?
    val cxxCompiler: String?
    val system: String?
    val systemName: String?
    val systemProcessor: String?
    val systemVersion: String?
    val installRpath: String?
    val cFlags: String?
    val cxxFlags: String?
    val verboseMakefile: Boolean?
    val modulePath: String?
    val exportCompileCommands: Boolean?
    val prefixPath: String?
    val buildSharedLibs: Boolean?
}

interface BasicCMakeEntries : BasicCMakeEntriesProps, CMakeCacheEntries

interface ModifiableBasicCMakeEntries : BasicCMakeEntries {
    override var buildType: String?
    override var cCompiler: String?
    override var cxxCompiler: String?
    override var system: String?
    override var systemName: String?
    override var systemProcessor: String?
    override var systemVersion: String?
    override var installRpath: String?
    override var cFlags: String?
    override var cxxFlags: String?
    override var verboseMakefile: Boolean?
    override var modulePath: String?
    override var exportCompileCommands: Boolean?
    override var prefixPath: String?
    override var buildSharedLibs: Boolean?
}

interface BasicCMakeEntriesAutoGen : BasicCMakeEntries, CMakeCacheEntriesWithValueAutoGenerated {
    override val propertyNameToKey: Map<String, String>
        get() = mapOf(
            "buildType" to "CMAKE_BUILD_TYPE",
            "cCompiler" to "CMAKE_C_COMPILER",
            "cxxCompiler" to "CMAKE_CXX_COMPILER",
            "system" to "CMAKE_SYSTEM",
            "systemName" to "CMAKE_SYSTEM_NAME",
            "systemProcessor" to "CMAKE_SYSTEM_PROCESSOR",
            "systemVersion" to "CMAKE_SYSTEM_VERSION",
            "installRpath" to "CMAKE_INSTALL_RPATH",
            "cFlags" to "CMAKE_C_FLAGS",
            "cxxFlags" to "CMAKE_CXX_FLAGS",
            "verboseMakefile" to "CMAKE_VERBOSE_MAKEFILE",
            "modulePath" to "CMAKE_MODULE_PATH",
            "exportCompileCommands" to "CMAKE_EXPORT_COMPILE_COMMANDS",
            "prefixPath" to "CMAKE_PREFIX_PATH",
            "buildSharedLibs" to "BUILD_SHARED_LIBS",
        )
}

abstract class AbstractBasicCMakeEntries : BasicCMakeEntriesAutoGen {
    override val buildType: String? = null
    override val cCompiler: String? = null
    override val cxxCompiler: String? = null
    override val system: String? = null
    override val systemName: String? = null
    override val systemProcessor: String? = null
    override val systemVersion: String? = null
    override val installRpath: String? = null
    override val cFlags: String? = null
    override val cxxFlags: String? = null
    override val verboseMakefile: Boolean? = null
    override val modulePath: String? = null
    override val exportCompileCommands: Boolean? = null
    override val prefixPath: String? = null
    override val buildSharedLibs: Boolean? = null
    override val propertyNameToKey: Map<String, String>
        get() = super.propertyNameToKey
}

open class ModifiableBasicCMakeEntriesImpl : ModifiableBasicCMakeEntries, BasicCMakeEntriesAutoGen,
    IHyperCMakeCacheEntries {
    private val hyper = object : HyperCMakeCacheEntries() {
        override val propertyNameToKey: Map<String, String>
            get() = this@ModifiableBasicCMakeEntriesImpl.propertyNameToKey
    }

    final override val recorder
        get() = hyper.recorder
    final override val explicitlyRemovedElements: Set<String>
        get() = hyper.explicitlyRemovedElements

    override val propertyNameToKey: Map<String, String>
        get() = super.propertyNameToKey

    override var buildType: String? by recorder.observed(null)
    override var cCompiler: String? by recorder.observed(null)
    override var cxxCompiler: String? by recorder.observed(null)
    override var system: String? by recorder.observed(null)
    override var systemName: String? by recorder.observed(null)
    override var systemProcessor: String? by recorder.observed(null)
    override var systemVersion: String? by recorder.observed(null)
    override var installRpath: String? by recorder.observed(null)
    override var cFlags: String? by recorder.observed(null)
    override var cxxFlags: String? by recorder.observed(null)
    override var verboseMakefile: Boolean? by recorder.observed(null)
    override var modulePath: String? by recorder.observed(null)
    override var exportCompileCommands: Boolean? by recorder.observed(null)
    override var prefixPath: String? by recorder.observed(null)
    override var buildSharedLibs: Boolean? by recorder.observed(null)
}
